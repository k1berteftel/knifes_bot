import asyncio
from aiogram import Bot
from aiogram import Bot
from aiogram_dialog import DialogManager
from aiogram.types import InlineKeyboardMarkup, Message, FSInputFile
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database.action_data_class import DataInteraction


async def send_messages(bot: Bot, session: DataInteraction, keyboard: InlineKeyboardMarkup | None, **kwargs):
    users = await session.get_users()
    text = kwargs.get('text')
    caption = kwargs.get('caption')
    photo = kwargs.get('photo')
    video = kwargs.get('video')
    if text:
        for user in users:
            try:
                await bot.send_message(
                    chat_id=user.user_id,
                    text=text.format(name=user.name),
                    reply_markup=keyboard
                )
                if user.active == 0:
                    await session.set_active(user.user_id, 1)
            except Exception as err:
                print(err)
                await session.set_active(user.user_id, 0)
    elif caption:
        if photo:
            for user in users:
                try:
                    await bot.send_photo(
                        chat_id=user.user_id,
                        photo=photo,
                        caption=caption.format(name=user.name),
                        reply_markup=keyboard
                    )
                    if user.active == 0:
                        await session.set_active(user.user_id, 1)
                except Exception as err:
                    print(err)
                    await session.set_active(user.user_id, 0)
        else:
            for user in users:
                try:
                    await bot.send_video(
                        chat_id=user.user_id,
                        video=video,
                        caption=caption.format(name=user.name),
                        reply_markup=keyboard
                    )
                    if user.active == 0:
                        await session.set_active(user.user_id, 1)
                except Exception as err:
                    print(err)
                    await session.set_active(user.user_id, 0)


async def start_queue(user_id: int, bot: Bot, session: DataInteraction, scheduler: AsyncIOScheduler):
    text = ('–ó–¥—Ä–∞–≤–∏—è, –º–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏—Ö–∞–∏–ª - —è –∫—É–∑–Ω–µ—Ü! \n–ö–∞–∫ —Ä–∞–∑ –∫–ª–∏–Ω–æ–∫ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é –¥–ª—è —Å–≤–æ–µ–π —Ñ–∏–Ω–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ.\n\n'
            '–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Å–µ–≥–æ–¥–Ω—è –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ü–û–î–ê–†–û–ö!\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –í—ã –ø–æ–¥ –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–æ–∂ –ø–æ–¥–±–∏—Ä–∞–µ—Ç–µ ? '
            '( —ç—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Å—Ç–∞–ª—å –ø–æ–¥–æ–±—Ä–∞—Ç—å)')
    message = await bot.send_message(
        chat_id=user_id,
        text=text
    )
    #await session.add_dialog_message(user_id, message.message_id, 'me')
    await asyncio.sleep(10)
    try:
        message = await bot.send_video_note(
            chat_id=user_id,
            video_note=FSInputFile(path='media/start_note.mp4'),
            request_timeout=60
        )
        #await session.add_dialog_message(user_id, message.message_id, 'me')
    except Exception as err:
        print(err)
    text = ('–°–µ–≥–æ–¥–Ω—è –æ—Ç –¥—É—à–∏ –∫–ª–∞–¥—É –ø–æ–¥–∞—Ä–æ–∫ –∫ –∑–∞–∫–∞–∑—É\n–ü–æ–¥ –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–æ–∂ —Å–º–æ—Ç—Ä–∏—Ç–µ? –û—Ö–æ—Ç–∞, —Ä—ã–±–∞–ª–∫–∞, '
            '–≤ –ø–æ—Ö–æ–¥—ã –∏–ª–∏ –Ω–∞ –∫—É—Ö–Ω—é? –ü–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–πüîò')
    await asyncio.sleep(30)
    message = await bot.send_message(
        chat_id=user_id,
        text=text
    )
    #await session.add_dialog_message(user_id, message.message_id, 'me')
    job = scheduler.get_job(f'{user_id}_queue')
    if job:
        job.remove()


async def custom_queue(bot: Bot, user_id: int, message_id: int, chat_id: int, session: DataInteraction):
    try:
        await bot.copy_message(
            chat_id=user_id,
            message_id=message_id,
            from_chat_id=chat_id,
            request_timeout=60
        )
    except Exception as err:
        print(err)
        await session.set_active(user_id, 0)

